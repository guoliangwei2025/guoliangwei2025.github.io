{"title":"hot100题-滑动窗口","uid":"c57f5e58e95d302870f92248fd84656d","slug":"hot100题-滑动窗口","date":"2025-08-29T02:23:43.000Z","updated":"2025-09-01T03:23:32.824Z","comments":true,"path":"api/articles/hot100题-滑动窗口.json","keywords":"AI、Python","cover":null,"content":"<h1 id=\"滑动窗口（定长、不定长、多指针）\"><a href=\"#滑动窗口（定长、不定长、多指针）\" class=\"headerlink\" title=\"滑动窗口（定长、不定长、多指针）\"></a>滑动窗口（定长、不定长、多指针）</h1><h2 id=\"定长的滑动窗口\"><a href=\"#定长的滑动窗口\" class=\"headerlink\" title=\"定长的滑动窗口\"></a>定长的滑动窗口</h2><p>三步走  入–更新–出</p>\n<p>入：下标为 i 的元素进入窗口，更新相关统计量。如果 i&lt;k−1 则重复第一步。</p>\n<p>更新：更新答案。一般是更新最大值&#x2F;最小值。</p>\n<p>出：下标为 i−k+1 的元素离开窗口，更新相关统计量。</p>\n<p>思考：先找到前面k-1个元素，然后进入的元素与前面的k-1的元素成定长窗口，然后前面的元素出，后面的元素进入</p>\n<p>解决循环数组问题 可以使用扩展数组 将数组扩大一倍 </p>\n<h2 id=\"滑动窗口模版题\"><a href=\"#滑动窗口模版题\" class=\"headerlink\" title=\"滑动窗口模版题\"></a>滑动窗口模版题</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>&#x2F;&#x2F;外层循环扩展右边界，内层循环扩展左边界 </p>\n<p>for (int l &#x3D; 0, r &#x3D; 0 ; r &lt; n ; r++) { </p>\n<p>​\t&#x2F;&#x2F;当前考虑的元素 \t</p>\n<p>while (l &lt;&#x3D; r &amp;&amp; check()) {&#x2F;&#x2F;区间[left,right]不符合题意 &#x2F;&#x2F;扩展左边界 } &#x2F;&#x2F;区间[left,right]符合题意，统计相关信息 }</p></blockquote>\n<h1 id=\"无重复字符的最长子串（3）\"><a href=\"#无重复字符的最长子串（3）\" class=\"headerlink\" title=\"无重复字符的最长子串（3）\"></a>无重复字符的最长子串（3）</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters/\">3. 无重复字符的最长子串</a></p>\n<p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长 子串 的长度。</p></blockquote>\n<p>本题使用滑动窗口的思想，满足条件时进入窗口，当条件不满足时，移动窗口的值，然后更新相关的值。使用 <code>list</code> 里的 <code>in</code> 和 <code>pop(0)</code> 操作时间复杂，因此合理的方式是使用哈希集合+滑动窗口</p>\n<p>①列表+滑动窗口</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">lengthOfLongestSubstring</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"comment\">#定义列表 如果当前字符不在列表中 则进入列表</span></span><br><span class=\"line\">        <span class=\"comment\">#如果在列表中 需要循环删除 直到当前字符不在列表中</span></span><br><span class=\"line\">        t = []</span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(s)):</span><br><span class=\"line\">            <span class=\"keyword\">while</span> s[i] <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">                t.pop(<span class=\"number\">0</span>)   <span class=\"comment\">#删除之前的值 使得当前加入的值 </span></span><br><span class=\"line\">            t.append(s[i])</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res,<span class=\"built_in\">len</span>(t))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n\n<p>②哈希集合+滑动窗口</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">lengthOfLongestSubstring</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"comment\">#使用滑动窗口+双指针进行维护 </span></span><br><span class=\"line\">        char_set = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        l = <span class=\"number\">0</span></span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(s)):</span><br><span class=\"line\">            <span class=\"keyword\">while</span> s[r] <span class=\"keyword\">in</span> char_set:   <span class=\"comment\"># 如果重复，就缩小窗口</span></span><br><span class=\"line\">                char_set.remove(s[l])</span><br><span class=\"line\">                l += <span class=\"number\">1</span></span><br><span class=\"line\">            char_set.add(s[r])</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, r - l + <span class=\"number\">1</span>)  <span class=\"comment\"># 更新窗口最大长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"找到字符串中所有字母异位词（438）\"><a href=\"#找到字符串中所有字母异位词（438）\" class=\"headerlink\" title=\"找到字符串中所有字母异位词（438）\"></a>找到字符串中所有字母异位词（438）</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://leetcode.cn/problems/find-all-anagrams-in-a-string/\">438. 找到字符串中所有字母异位词</a></p>\n<p>给定两个字符串 s 和 p，找到 s 中所有 p 的 异位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p></blockquote>\n<p>本题使用滑动窗口+计数的方式来进行，维持一个维持一个 跟字符串p长度相等的滑动窗口，然后转化成字符列表进行计算来判断是否是异位词</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">findAnagrams</span>(<span class=\"params\">self, s: <span class=\"built_in\">str</span>, p: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        <span class=\"comment\">#维持一个 跟字符串p长度相等的 滑动窗口</span></span><br><span class=\"line\">        <span class=\"comment\">#转化成字符列表或者哈希表来比较滑动窗口组成的值和字符串p是否是异位词</span></span><br><span class=\"line\">        s_len,p_len = <span class=\"built_in\">len</span>(s),<span class=\"built_in\">len</span>(p)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> s_len &lt; p_len:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        ans = []</span><br><span class=\"line\">        p_count = [<span class=\"number\">0</span>]*<span class=\"number\">26</span></span><br><span class=\"line\">        s_count = [<span class=\"number\">0</span>]*<span class=\"number\">26</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(p_len):</span><br><span class=\"line\">            s_count[<span class=\"built_in\">ord</span>(s[i])-<span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>)]+= <span class=\"number\">1</span></span><br><span class=\"line\">            p_count[<span class=\"built_in\">ord</span>(p[i])-<span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>)]+= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> s_count==p_count:</span><br><span class=\"line\">            ans.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(s_len-p_len):</span><br><span class=\"line\">            <span class=\"comment\">#把下标为i的数去掉</span></span><br><span class=\"line\">            s_count[<span class=\"built_in\">ord</span>(s[i])-<span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>)]-= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"comment\">#加入下标为i+p_len的数 此时区间就为 [i+1,i+p_len]</span></span><br><span class=\"line\">            s_count[<span class=\"built_in\">ord</span>(s[i+p_len])-<span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>)]+= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> s_count==p_count:</span><br><span class=\"line\">                <span class=\"comment\">#如果相等 则将首部索引加入</span></span><br><span class=\"line\">                ans.append(i+<span class=\"number\">1</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">          </span><br></pre></td></tr></table></figure>\n\n","text":"滑动窗口（定长、不定长、多指针）定长的滑动窗口三步走 入–更新–出 入：下标为 i 的元素进入窗口，更新相关统计量。如果 i<k−1 则重复第一步。 更新：更新...","permalink":"/post/hot100题-滑动窗口","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"hot-100题","slug":"hot-100题","count":5,"path":"api/categories/hot-100题.json"}],"tags":[{"name":"hot100-滑动窗口","slug":"hot100-滑动窗口","count":1,"path":"api/tags/hot100-滑动窗口.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%EF%BC%88%E5%AE%9A%E9%95%BF%E3%80%81%E4%B8%8D%E5%AE%9A%E9%95%BF%E3%80%81%E5%A4%9A%E6%8C%87%E9%92%88%EF%BC%89\"><span class=\"toc-text\">滑动窗口（定长、不定长、多指针）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E9%95%BF%E7%9A%84%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3\"><span class=\"toc-text\">定长的滑动窗口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%A8%A1%E7%89%88%E9%A2%98\"><span class=\"toc-text\">滑动窗口模版题</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%EF%BC%883%EF%BC%89\"><span class=\"toc-text\">无重复字符的最长子串（3）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%EF%BC%88438%EF%BC%89\"><span class=\"toc-text\">找到字符串中所有字母异位词（438）</span></a></li></ol>","author":{"name":"GuoLiangWei","slug":"blog-author","avatar":"/img/logo.jpg","link":"/","description":"<span style='font-size:30px;background:linear-gradient(90deg,#00c6ff,#0072ff);-webkit-background-clip:text;-webkit-text-fill-color:transparent;'>心照不宣</span>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"https://cdn.jsdelivr.net/npm/simple-icons@11/icons/github.svg","link":"https://github.com/guoliangwei2025"},"qq":{"icon":"https://cdn.jsdelivr.net/npm/simple-icons@11/icons/tencentqq.svg","link":"https://wpa.qq.com/msgrd?v=3&uin=2691160140&site=qq&menu=yes"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"python哈希","uid":"e9d0d8f4e1bdd2740089cdd8df83ea22","slug":"python哈希","date":"2025-08-29T02:44:15.000Z","updated":"2025-08-29T02:51:34.820Z","comments":true,"path":"api/articles/python哈希.json","keywords":"AI、Python","cover":null,"text":" 本文是借助ChatGPT结合总结的关于哈希相关的知识，以及哈希表的相关定义和使用，帮助理解哈希表的作用以及哈希表的使用场景 Python中的哈希哈希的含义哈希...","permalink":"/post/python哈希","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"python","slug":"python","count":2,"path":"api/categories/python.json"}],"tags":[{"name":"python哈希","slug":"python哈希","count":1,"path":"api/tags/python哈希.json"}],"author":{"name":"GuoLiangWei","slug":"blog-author","avatar":"/img/logo.jpg","link":"/","description":"<span style='font-size:30px;background:linear-gradient(90deg,#00c6ff,#0072ff);-webkit-background-clip:text;-webkit-text-fill-color:transparent;'>心照不宣</span>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"https://cdn.jsdelivr.net/npm/simple-icons@11/icons/github.svg","link":"https://github.com/guoliangwei2025"},"qq":{"icon":"https://cdn.jsdelivr.net/npm/simple-icons@11/icons/tencentqq.svg","link":"https://wpa.qq.com/msgrd?v=3&uin=2691160140&site=qq&menu=yes"}}}}},"next_post":{"title":"hot100题-哈希","uid":"fe35bb6acb69f6adf8c346c758bbeeb1","slug":"hot100题-哈希","date":"2025-08-29T01:37:39.000Z","updated":"2025-08-29T07:29:08.373Z","comments":true,"path":"api/articles/hot100题-哈希.json","keywords":"AI、Python","cover":null,"text":"两数之和（1） 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标...","permalink":"/post/hot100题-哈希","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"hot-100题","slug":"hot-100题","count":5,"path":"api/categories/hot-100题.json"}],"tags":[{"name":"hot100-哈希","slug":"hot100-哈希","count":1,"path":"api/tags/hot100-哈希.json"}],"author":{"name":"GuoLiangWei","slug":"blog-author","avatar":"/img/logo.jpg","link":"/","description":"<span style='font-size:30px;background:linear-gradient(90deg,#00c6ff,#0072ff);-webkit-background-clip:text;-webkit-text-fill-color:transparent;'>心照不宣</span>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"https://cdn.jsdelivr.net/npm/simple-icons@11/icons/github.svg","link":"https://github.com/guoliangwei2025"},"qq":{"icon":"https://cdn.jsdelivr.net/npm/simple-icons@11/icons/tencentqq.svg","link":"https://wpa.qq.com/msgrd?v=3&uin=2691160140&site=qq&menu=yes"}}}}}}