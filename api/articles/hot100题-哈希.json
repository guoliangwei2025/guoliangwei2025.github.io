{"title":"hot100题-哈希","uid":"fe35bb6acb69f6adf8c346c758bbeeb1","slug":"hot100题-哈希","date":"2025-08-29T01:37:39.000Z","updated":"2025-08-29T07:29:08.373Z","comments":true,"path":"api/articles/hot100题-哈希.json","keywords":"AI、Python","cover":null,"content":"<h1 id=\"两数之和（1）\"><a href=\"#两数之和（1）\" class=\"headerlink\" title=\"两数之和（1）\"></a>两数之和（1）</h1><blockquote>\n<p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标</p>\n</blockquote>\n<p><a href=\"https://leetcode.cn/problems/two-sum/\">1.两数之和</a></p>\n<p>①暴力解法 </p>\n<p>使用两层循环暴力进行解答</p>\n<p>②使用哈希表</p>\n<p><strong>为啥要用到哈希表呢？</strong> 在数组中查询时间复杂度太高，需要顺序查找，而哈希表可根据值快速查找</p>\n<blockquote>\n<p>python中字典也是哈希表的一种实现。定义哈希表后，遍历数组，如果目标值-当前值不在哈希表中，则将当前值以及对应的索引存入哈希表。如果能在哈希表中找到对应的值，则返回对应的下标</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">twoSum</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        <span class=\"comment\">#定义哈希表 如果 target-当前元素不在哈希表中 就加入哈希表 </span></span><br><span class=\"line\">        t = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i,num <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(nums):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> target-num <span class=\"keyword\">in</span> t:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [t[target-num],i]</span><br><span class=\"line\">            t[num] = i</span><br><span class=\"line\">        <span class=\"keyword\">return</span> </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"字母异位词分组（49）\"><a href=\"#字母异位词分组（49）\" class=\"headerlink\" title=\"字母异位词分组（49）\"></a>字母异位词分组（49）</h1><p><a href=\"https://leetcode.cn/problems/group-anagrams/\">49. 字母异位词分组</a></p>\n<blockquote>\n<p>给你一个字符串数组，请你将字母异位词组合在一起。可以按任意顺序返回结果列表。</p>\n</blockquote>\n<p>字母异位词组成单词相同，仅仅是位置不一样，可以建立哈希表，找到作为字母异位词的相同点作为哈希表的键，字母异位词的键值都是相等的，根据这一点，实现了不同的字母异位词的分类</p>\n<p>然后将每个字符串进行排序之后组合新的字符串作为哈希表的键，加入到哈希表中，这样就实现了不同的字母异位词的分类</p>\n<p>①将每个字符串按照字典顺序进行排序，排列组合成新的字符串作为哈希表的键</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">groupAnagrams</span>(<span class=\"params\">self, strs: <span class=\"type\">List</span>[<span class=\"built_in\">str</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">str</span>]]:</span><br><span class=\"line\">        mp = defaultdict(<span class=\"built_in\">list</span>)  <span class=\"comment\"># 创建哈希表，value 默认是列表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> st <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">            key = <span class=\"string\">&quot;&quot;</span>.join(<span class=\"built_in\">sorted</span>(st))  <span class=\"comment\"># 对字符串排序，得到 key</span></span><br><span class=\"line\">            mp[key].append(st)         <span class=\"comment\"># 加入对应分组</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>(mp.values())       <span class=\"comment\"># 返回所有分组</span></span><br></pre></td></tr></table></figure>\n\n<p>②计数，定义数组计算每个字符串字母出现的个数，组成字母异位词的字符个数是相等的，但是列表是可变的所以不能哈希，需要转化成元组才能哈希</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">groupAnagrams</span>(<span class=\"params\">self, strs: <span class=\"type\">List</span>[<span class=\"built_in\">str</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">str</span>]]:</span><br><span class=\"line\">        mp = defaultdict(<span class=\"built_in\">list</span>)  <span class=\"comment\"># 创建哈希表，value 默认是列表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> st <span class=\"keyword\">in</span> strs:</span><br><span class=\"line\">            counts = [<span class=\"number\">0</span>]*<span class=\"number\">26</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> st:</span><br><span class=\"line\">                counts[<span class=\"built_in\">ord</span>(ch)-<span class=\"built_in\">ord</span>(<span class=\"string\">&quot;a&quot;</span>)] += <span class=\"number\">1</span></span><br><span class=\"line\">            mp[<span class=\"built_in\">tuple</span>(counts)].append(st)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>(mp.values())       <span class=\"comment\"># 返回所有分组</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"最长连续序列（128）\"><a href=\"#最长连续序列（128）\" class=\"headerlink\" title=\"最长连续序列（128）\"></a>最长连续序列（128）</h1><p><a href=\"https://leetcode.cn/problems/longest-consecutive-sequence/\">128. 最长连续序列</a></p>\n<blockquote>\n<p>给定一个未排序的整数数组 <code>nums</code> ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p>\n</blockquote>\n<p>本题目限制了时间复杂度为O(N)，因此不能使用排序。</p>\n<p>如果单独从列表找元素时间较长，因此先可以将列表转化为哈希集合，直接检索哈希结合，在找序列的时候也要注意就是，因为没有排序，那可能从当前位置x开始，可能x-1在哈希集合中因此如果x-1在哈希集合中，此时就跳过。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">longestConsecutive</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"comment\">#把nums转化成哈希集合</span></span><br><span class=\"line\">        st = <span class=\"built_in\">set</span>(nums)</span><br><span class=\"line\">        ans = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> st:</span><br><span class=\"line\">            <span class=\"comment\">#如果x-1在集合里面 从x为起点 不如x-1为起点的序列长</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> x-<span class=\"number\">1</span> <span class=\"keyword\">in</span> st:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            y = x +<span class=\"number\">1</span> </span><br><span class=\"line\">            <span class=\"comment\">#一直往后遍历 找到连续的序列</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> y <span class=\"keyword\">in</span> st:</span><br><span class=\"line\">                y += <span class=\"number\">1</span></span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans,y-x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans </span><br></pre></td></tr></table></figure>\n\n","text":"两数之和（1） 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标...","permalink":"/post/hot100题-哈希","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"hot-100题","slug":"hot-100题","count":5,"path":"api/categories/hot-100题.json"}],"tags":[{"name":"hot100-哈希","slug":"hot100-哈希","count":1,"path":"api/tags/hot100-哈希.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%EF%BC%881%EF%BC%89\"><span class=\"toc-text\">两数之和（1）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84%EF%BC%8849%EF%BC%89\"><span class=\"toc-text\">字母异位词分组（49）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97%EF%BC%88128%EF%BC%89\"><span class=\"toc-text\">最长连续序列（128）</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"/img/logo.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"hot100题-滑动窗口","uid":"c57f5e58e95d302870f92248fd84656d","slug":"hot100题-滑动窗口","date":"2025-08-29T02:23:43.000Z","updated":"2025-09-01T03:23:32.824Z","comments":true,"path":"api/articles/hot100题-滑动窗口.json","keywords":"AI、Python","cover":null,"text":"滑动窗口（定长、不定长、多指针）定长的滑动窗口三步走 入–更新–出 入：下标为 i 的元素进入窗口，更新相关统计量。如果 i<k−1 则重复第一步。 更新：更新...","permalink":"/post/hot100题-滑动窗口","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"hot-100题","slug":"hot-100题","count":5,"path":"api/categories/hot-100题.json"}],"tags":[{"name":"hot100-滑动窗口","slug":"hot100-滑动窗口","count":1,"path":"api/tags/hot100-滑动窗口.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"/img/logo.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"MCP","uid":"0cec45348c42060a94488bf44a5c4b6b","slug":"MCP","date":"2025-08-28T06:21:20.000Z","updated":"2025-09-07T11:02:28.410Z","comments":true,"path":"api/articles/MCP.json","keywords":"AI、Python","cover":[],"text":"MCPFunction call 维度 Function Calling（FC） MCP（Model Context Protocol） 本质 能力 —— 某个...","permalink":"/post/MCP","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"AI","slug":"AI","count":2,"path":"api/categories/AI.json"}],"tags":[{"name":"MCP","slug":"MCP","count":1,"path":"api/tags/MCP.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"/img/logo.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}