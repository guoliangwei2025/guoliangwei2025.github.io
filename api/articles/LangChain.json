{"title":"LangChain","uid":"0d43d0f6b5521a4904839727c6757d0b","slug":"LangChain","date":"2025-08-25T02:23:50.000Z","updated":"2025-08-26T08:06:10.839Z","comments":true,"path":"api/articles/LangChain.json","keywords":"AI、Python","cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本篇文章主要介绍LangChain基础语法，RAG原理，以及使用LangChain实现简易的RAG系统，详细的RAG优化以及类型在另外的文章进行介绍</p></blockquote>\n<h1 id=\"1-LangChain-简介\"><a href=\"#1-LangChain-简介\" class=\"headerlink\" title=\"1.LangChain 简介\"></a>1.LangChain 简介</h1><p>Langchains是用于开发大模型驱动的框架，借助LangChain可以轻松搭建基于LLM的相关应用，比如RAG系统</p>\n<p>此框架包含以下部分：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">langchain-<span class=\"attr\">core</span>: 基础抽象和<span class=\"title class_\">LangChain</span>表达式 (<span class=\"variable constant_\">LCEL</span>)</span><br><span class=\"line\">langchain-<span class=\"attr\">community</span>: 第三方集成，第三方相关的包</span><br><span class=\"line\"><span class=\"attr\">langchain</span>: 组成应用程序认知架构的链、代理和检索策略。</span><br><span class=\"line\"><span class=\"title class_\">LangGraph</span>: 通过将步骤建模为图中的边和节点，构建强大且有状态的多参与者应用程序。与<span class=\"title class_\">LangChain</span>无缝集成，但也可以单独使用</span><br><span class=\"line\"><span class=\"title class_\">LangServe</span>: 将<span class=\"title class_\">LangChain</span>链部署为<span class=\"variable constant_\">REST</span> <span class=\"variable constant_\">API</span></span><br><span class=\"line\"><span class=\"title class_\">LangSmith</span>: 一个开发者平台，让您调试、测试、评估和监控<span class=\"variable constant_\">LLM</span>应用程序</span><br></pre></td></tr></table></figure>\n\n\n\n<img src=\"/post/LangChain/langchain_stack_062024.svg\" class=\"\" title=\"Diagram outlining the hierarchical organization of the LangChain framework, displaying the interconnected parts across multiple layers.\">\n\n\n\n<h1 id=\"2-LangChain-基础\"><a href=\"#2-LangChain-基础\" class=\"headerlink\" title=\"2.LangChain 基础\"></a>2.LangChain 基础</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>LangChain是为大模型应用而生的框架，结合大模型应用逻辑上，分为输入、模型处理、输出三个环节。通过构建提示词工程，作为上下文给大模型，然后通过结果解析器解析相应格式的输出</p></blockquote>\n<h3 id=\"LCEL表达式\"><a href=\"#LCEL表达式\" class=\"headerlink\" title=\"LCEL表达式\"></a>LCEL表达式</h3><p>基于LangChain框架编写大模型应用的过程就像垒积木，其中的积木就是Prompts，LLMs和各OutputParser等。如何将这些积木组织起来，除了使用基本Python语法调用对应类的方法，一种更灵活的方法就是使用位于LangChain-Core层中的LCEL（LangChain Expression Language）(使用管道符来进行拼接)</p>\n<h3 id=\"Runnable接口\"><a href=\"#Runnable接口\" class=\"headerlink\" title=\"Runnable接口\"></a>Runnable接口</h3><p>LCEL的基础是Runnable接口。通过实现Runnable接口，LCEL定义了一组具有通用调用方式的方法集。</p>\n<p>Runnable有一系列的子类，比如PromptTemplate、LLM和StrOutputParser（还有更多），这些组件子类都间接继承自Runnable(继承自RunnableSequence，而后者又继承自Runnable) 通过 管道符”|”前后两个组件合成一个Runnable的子孙类RunnableSequence对象返回，从而达到串起来形成链(chain)的目的。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Runnable的__or__()方法重新定义了”|”语法，所以基于LCEL的chain就能通过或(也类似shell中的管道)操作符号”|”串起来。这也就是前面提到的“chain &#x3D; prompt | llm | output_parser”这行代码虽然看上去跟普通Python不一样，但它是合法的，原因就在这里</p></blockquote>\n<h1 id=\"3-LangChain实现RAG\"><a href=\"#3-LangChain实现RAG\" class=\"headerlink\" title=\"3.LangChain实现RAG\"></a>3.LangChain实现RAG</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>RAG的出现是为了在一定程度上缓解大模型的幻觉问题，因为大模型的输出是基于数学概率的输出预测、且信息不具有实效性、缺乏相关领域的专业知识，下面使用LangChain的链式调用实现简单的RAG。</p></blockquote>\n<p>基础RAG系统，流程如下：</p>\n<ol>\n<li>文档切分</li>\n<li>向量嵌入</li>\n<li>构建提示词</li>\n<li>定义大模型服务</li>\n<li>检索相关片段作为大模型上下文</li>\n<li>结果解析器对大模型结果进行解析</li>\n</ol>\n<img src=\"/post/LangChain/1749692995102-11eee3df-61bf-45ed-9bda-aae631c77571.png\" class=\"\" title=\"image.png\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#完整的rag  </span></span><br><span class=\"line\"><span class=\"keyword\">from</span> langchain_core.output_parsers  <span class=\"keyword\">import</span> StrOutputParser</span><br><span class=\"line\">query = <span class=\"string\">&quot;在线支付取消订单后钱怎么返还&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> langchain_community.embeddings <span class=\"keyword\">import</span> DashScopeEmbeddings</span><br><span class=\"line\"><span class=\"keyword\">from</span> config.load_key <span class=\"keyword\">import</span> load_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.environ.get(<span class=\"string\">&quot;DASHSCOPE_API_KEY&quot;</span>):</span><br><span class=\"line\">    os.environ[<span class=\"string\">&quot;DASHSCOPE_API_KEY&quot;</span>] = load_key(<span class=\"string\">&quot;LANGSMITH_API_KEY&quot;</span>)</span><br><span class=\"line\">embedding_model = DashScopeEmbeddings(model=<span class=\"string\">&quot;text-embedding-v1&quot;</span>)</span><br><span class=\"line\">redis_url = <span class=\"string\">&quot;redis://localhost:6379&quot;</span></span><br><span class=\"line\">config = RedisConfig(</span><br><span class=\"line\">    index_name=<span class=\"string\">&quot;meituan-index&quot;</span>,   <span class=\"comment\"># 索引名，对应之前构建的知识库索引</span></span><br><span class=\"line\">    redis_url=redis_url,          <span class=\"comment\"># Redis 连接地址</span></span><br><span class=\"line\">)</span><br><span class=\"line\">vector_store = RedisVectorStore(embedding_model, config=config)</span><br><span class=\"line\">retriever = vector_store.as_retriever()</span><br><span class=\"line\"><span class=\"comment\">#定义大模型</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> langchain_openai <span class=\"keyword\">import</span>  ChatOpenAI</span><br><span class=\"line\">llm = ChatOpenAI(</span><br><span class=\"line\">    model = <span class=\"string\">&quot;deepseek-v3&quot;</span>,</span><br><span class=\"line\">    base_url =<span class=\"string\">&quot;https://dashscope.aliyuncs.com/compatible-mode/v1 &quot;</span>,</span><br><span class=\"line\">    openai_key = load_key(<span class=\"string\">&quot;LANGSMITH_API_KEY&quot;</span>),</span><br><span class=\"line\">)</span><br><span class=\"line\"> <span class=\"comment\">#定义提示模板</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> langchain_core.prompts <span class=\"keyword\">import</span>  ChatPromptTemplate</span><br><span class=\"line\">prompt_template = ChatPromptTemplate.from_messages([</span><br><span class=\"line\">    (<span class=\"string\">&quot;user&quot;</span>, <span class=\"string\">&quot;你是一个答疑机器人，你的任务是根据下述给定的已知信息回答用户问题。\\n&quot;</span></span><br><span class=\"line\">             <span class=\"string\">&quot;已知信息：&#123;context&#125;\\n&quot;</span></span><br><span class=\"line\">             <span class=\"string\">&quot;用户问题：&#123;question&#125;\\n\\n&quot;</span></span><br><span class=\"line\">             <span class=\"string\">&quot;如果已知信息不含用户问题的答案，或者已知信息不足以回答用户问题，请直接回复“我无法回答您问题”。\\n&quot;</span></span><br><span class=\"line\">             <span class=\"string\">&quot;请不要输出已知信息中不包含的信息或答案。\\n&quot;</span></span><br><span class=\"line\">             <span class=\"string\">&quot;请用中文回答用户问题。&quot;</span>)</span><br><span class=\"line\">  ])</span><br><span class=\"line\"><span class=\"comment\">#收集document内容</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">collect_document_content</span>(<span class=\"params\">segments</span>):</span><br><span class=\"line\">    text = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> segment <span class=\"keyword\">in</span> segments:</span><br><span class=\"line\">        text.append(segment.page_content)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> text</span><br><span class=\"line\"><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> itemgetter</span><br><span class=\"line\">chain = (&#123;</span><br><span class=\"line\">     <span class=\"string\">&quot;question&quot;</span>: query,</span><br><span class=\"line\">    <span class=\"string\">&quot;context&quot;</span>: itemgetter(<span class=\"string\">&quot;question&quot;</span>)|retriever |collect_document_content,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">| prompt_template</span><br><span class=\"line\">| llm</span><br><span class=\"line\">| StrOutputParser()</span><br><span class=\"line\">)</span><br><span class=\"line\">response = chain.invoke(&#123;<span class=\"string\">&quot;question&quot;</span>: query&#125;)</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-相关资料\"><a href=\"#4-相关资料\" class=\"headerlink\" title=\"4.相关资料\"></a>4.相关资料</h1><p><a href=\"https://www.yuque.com/goodnote/llm-dev\">大模型应用开发学习资料</a></p>\n<p><a href=\"https://www.langchain.com.cn/\">LangChain中文文档</a></p>\n<p><a href=\"https://blog.csdn.net/stingfire/category_12701200.html\">CSDN博客</a></p>\n","text":" 本篇文章主要介绍LangChain基础语法，RAG原理，以及使用LangChain实现简易的RAG系统，详细的RAG优化以及类型在另外的文章进行介绍 1.La...","permalink":"/post/LangChain","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"Langchain","slug":"Langchain","count":1,"path":"api/categories/Langchain.json"}],"tags":[{"name":"AI","slug":"AI","count":2,"path":"api/tags/AI.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-LangChain-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1.LangChain 简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-LangChain-%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">2.LangChain 基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LCEL%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">LCEL表达式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Runnable%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">Runnable接口</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-LangChain%E5%AE%9E%E7%8E%B0RAG\"><span class=\"toc-text\">3.LangChain实现RAG</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\"><span class=\"toc-text\">4.相关资料</span></a></li></ol>","author":{"name":"GuoLiangWei","slug":"blog-author","avatar":"/img/logo.jpg","link":"/","description":"<span style='font-size:30px;background:linear-gradient(90deg,#00c6ff,#0072ff);-webkit-background-clip:text;-webkit-text-fill-color:transparent;'>心照不宣</span>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"https://cdn.jsdelivr.net/npm/simple-icons@11/icons/github.svg","link":"https://github.com/guoliangwei2025"},"qq":{"icon":"https://cdn.jsdelivr.net/npm/simple-icons@11/icons/tencentqq.svg","link":"https://wpa.qq.com/msgrd?v=3&uin=2691160140&site=qq&menu=yes"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"AI应用开发","uid":"91542ceb6cfe1ea979ed37f536b865f2","slug":"AI应用开发","date":"2025-08-27T01:54:27.000Z","updated":"2025-08-27T01:54:27.379Z","comments":true,"path":"api/articles/AI应用开发.json","keywords":"AI、Python","cover":null,"text":"","permalink":"/post/AI应用开发","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"GuoLiangWei","slug":"blog-author","avatar":"/img/logo.jpg","link":"/","description":"<span style='font-size:30px;background:linear-gradient(90deg,#00c6ff,#0072ff);-webkit-background-clip:text;-webkit-text-fill-color:transparent;'>心照不宣</span>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"https://cdn.jsdelivr.net/npm/simple-icons@11/icons/github.svg","link":"https://github.com/guoliangwei2025"},"qq":{"icon":"https://cdn.jsdelivr.net/npm/simple-icons@11/icons/tencentqq.svg","link":"https://wpa.qq.com/msgrd?v=3&uin=2691160140&site=qq&menu=yes"}}}}},"next_post":{"title":"hexo博客搭建教程","uid":"7a072923df6718781f31165a7507480d","slug":"hexo博客搭建教程","date":"2025-08-24T05:44:09.000Z","updated":"2025-08-28T05:57:42.676Z","comments":true,"path":"api/articles/hexo博客搭建教程.json","keywords":"AI、Python","cover":[],"text":" 初衷： 我记得在刚上大三那会儿，想把自己学的一些东西记录到微信公众号上。刚开始坚持了几天，但是后来放弃了，因为大部分是Copy，也缺少自己的思考。 经过最近的...","permalink":"/post/hexo博客搭建教程","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"博客搭建教程","slug":"博客搭建教程","count":1,"path":"api/categories/博客搭建教程.json"}],"tags":[{"name":"博客搭建教程","slug":"博客搭建教程","count":1,"path":"api/tags/博客搭建教程.json"}],"author":{"name":"GuoLiangWei","slug":"blog-author","avatar":"/img/logo.jpg","link":"/","description":"<span style='font-size:30px;background:linear-gradient(90deg,#00c6ff,#0072ff);-webkit-background-clip:text;-webkit-text-fill-color:transparent;'>心照不宣</span>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"https://cdn.jsdelivr.net/npm/simple-icons@11/icons/github.svg","link":"https://github.com/guoliangwei2025"},"qq":{"icon":"https://cdn.jsdelivr.net/npm/simple-icons@11/icons/tencentqq.svg","link":"https://wpa.qq.com/msgrd?v=3&uin=2691160140&site=qq&menu=yes"}}}}}}