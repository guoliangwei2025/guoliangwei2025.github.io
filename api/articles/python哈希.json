{"title":"python哈希","uid":"e9d0d8f4e1bdd2740089cdd8df83ea22","slug":"python哈希","date":"2025-08-29T02:44:15.000Z","updated":"2025-08-29T02:51:34.820Z","comments":true,"path":"api/articles/python哈希.json","keywords":"AI、Python","cover":null,"content":"<blockquote>\n<p>本文是借助<code>ChatGPT</code>结合总结的关于哈希相关的知识，以及哈希表的相关定义和使用，帮助理解哈希表的作用以及哈希表的使用场景</p>\n</blockquote>\n<h1 id=\"Python中的哈希\"><a href=\"#Python中的哈希\" class=\"headerlink\" title=\"Python中的哈希\"></a><code>Python</code>中的哈希</h1><h2 id=\"哈希的含义\"><a href=\"#哈希的含义\" class=\"headerlink\" title=\"哈希的含义\"></a>哈希的含义</h2><p>哈希的含义是把 <strong>任意长度的数据</strong>（如字符串、数字、对象）通过 <strong>哈希函数（Hash Function）</strong>，转换成一个 <strong>固定长度的整数</strong>，通常用作 <strong>索引或标识</strong>。</p>\n<p>哈希函数的作用：把数据“映射”到一个整数，用这个整数可以在数组或表里快速找到对应位置</p>\n<h2 id=\"哈希表（Hash-Table）\"><a href=\"#哈希表（Hash-Table）\" class=\"headerlink\" title=\"哈希表（Hash Table）\"></a>哈希表（Hash Table）</h2><p>哈希表是哈希的最常见应用：</p>\n<ul>\n<li>由 <strong>数组 + 哈希函数</strong> 构成</li>\n<li>使用 key 的哈希值快速找到 value 的存储位置</li>\n<li>插入&#x2F;查找&#x2F;删除平均时间复杂度 <strong>O(1)</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key = <span class=\"string\">&quot;apple&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">hash</span>(<span class=\"string\">&quot;apple&quot;</span>) = <span class=\"number\">7</span>  → 存在数组索引 <span class=\"number\">7</span></span><br><span class=\"line\">value = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"哈希表基础\"><a href=\"#哈希表基础\" class=\"headerlink\" title=\"哈希表基础\"></a>哈希表基础</h2><p><strong>哈希表（Hash Table）</strong> 是一种 <strong>基于键值映射的数据结构</strong>，核心特点：</p>\n<ul>\n<li><strong>键（key） → 哈希函数 → 数组索引 → 值（value）</strong></li>\n<li>查找、插入、删除平均时间复杂度 <strong>O(1)</strong></li>\n<li>Python 内部使用 <strong>开放寻址 + 链表&#x2F;红黑树</strong> 来处理冲突</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key=<span class=\"string\">&quot;apple&quot;</span> → <span class=\"built_in\">hash</span>(<span class=\"string\">&quot;apple&quot;</span>) → 索引 <span class=\"number\">7</span> → value=<span class=\"number\">5</span></span><br><span class=\"line\">key=<span class=\"string\">&quot;banana&quot;</span> → <span class=\"built_in\">hash</span>(<span class=\"string\">&quot;banana&quot;</span>) → 索引 <span class=\"number\">3</span> → value=<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"dict（字典）\"><a href=\"#dict（字典）\" class=\"headerlink\" title=\"dict（字典）\"></a><code>dict</code>（字典）</h2><p>Python中内置的哈希表类型</p>\n<p>key：不可变的类型（<code>int，str，tuple</code>）</p>\n<p>value：任意类型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scores = &#123;<span class=\"string\">&quot;Alice&quot;</span>: <span class=\"number\">90</span>, <span class=\"string\">&quot;Bob&quot;</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(scores[<span class=\"string\">&quot;Alice&quot;</span>])  <span class=\"comment\"># 90</span></span><br><span class=\"line\">scores[<span class=\"string\">&quot;Charlie&quot;</span>] = <span class=\"number\">92</span>  <span class=\"comment\"># 新增</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"defaultdict（带默认值的字典）\"><a href=\"#defaultdict（带默认值的字典）\" class=\"headerlink\" title=\"defaultdict（带默认值的字典）\"></a><code>defaultdict</code>（带默认值的字典）</h2><p>来自来自 <code>collections</code> 模块，工厂函数指定默认值类型</p>\n<p>常用类型：</p>\n<ul>\n<li><code>int</code> → 默认 0，用于计数</li>\n<li><code>list</code> → 默认 []，用于分组</li>\n<li><code>set</code> → 默认 set()，用于去重</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计数</span></span><br><span class=\"line\">cnt = defaultdict(<span class=\"built_in\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> <span class=\"string\">&quot;abracadabra&quot;</span>:</span><br><span class=\"line\">    cnt[ch] += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cnt)  <span class=\"comment\"># &#123;&#x27;a&#x27;:5, &#x27;b&#x27;:2, &#x27;r&#x27;:2, &#x27;c&#x27;:1, &#x27;d&#x27;:1&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分组</span></span><br><span class=\"line\">groups = defaultdict(<span class=\"built_in\">list</span>)</span><br><span class=\"line\">words = [<span class=\"string\">&quot;eat&quot;</span>,<span class=\"string\">&quot;tea&quot;</span>,<span class=\"string\">&quot;tan&quot;</span>,<span class=\"string\">&quot;ate&quot;</span>,<span class=\"string\">&quot;nat&quot;</span>,<span class=\"string\">&quot;bat&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">    key = <span class=\"string\">&quot;&quot;</span>.join(<span class=\"built_in\">sorted</span>(w))</span><br><span class=\"line\">    groups[key].append(w)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(groups.values())  <span class=\"comment\"># [[&#x27;eat&#x27;,&#x27;tea&#x27;,&#x27;ate&#x27;], [&#x27;tan&#x27;,&#x27;nat&#x27;], [&#x27;bat&#x27;]]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Counter（计数器）\"><a href=\"#Counter（计数器）\" class=\"headerlink\" title=\"Counter（计数器）\"></a><code>Counter</code>（计数器）</h2><ul>\n<li><code>collections.Counter</code> 是 <code>dict + int</code> 封装的计数工具</li>\n<li>功能：统计元素频率，直接返回哈希表</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</span><br><span class=\"line\">s = <span class=\"string\">&quot;abracadabra&quot;</span></span><br><span class=\"line\">cnt = Counter(s)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cnt)  <span class=\"comment\"># &#123;&#x27;a&#x27;:5,&#x27;b&#x27;:2,&#x27;r&#x27;:2,&#x27;c&#x27;:1,&#x27;d&#x27;:1&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"set（集合）\"><a href=\"#set（集合）\" class=\"headerlink\" title=\"set（集合）\"></a><code>set</code>（集合）</h2><p>哈希实现的无序集合，元素唯一、查找快速，常用于去重、快速判断元素是否存在</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">s = <span class=\"built_in\">set</span>(nums)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s)  <span class=\"comment\"># &#123;1,2,3,4,5&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span> <span class=\"keyword\">in</span> s)  <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"哈希使用场景\"><a href=\"#哈希使用场景\" class=\"headerlink\" title=\"哈希使用场景\"></a>哈希使用场景</h2><table>\n<thead>\n<tr>\n<th>场景</th>\n<th>常用类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>元素去重</td>\n<td><code>set</code></td>\n<td>判断元素是否存在</td>\n</tr>\n<tr>\n<td>计数&#x2F;频率统计</td>\n<td><code>dict / Counter / defaultdict(int)</code></td>\n<td>统计出现次数</td>\n</tr>\n<tr>\n<td>分组&#x2F;归类</td>\n<td><code>defaultdict(list)</code></td>\n<td>通过 key 分组元素</td>\n</tr>\n<tr>\n<td>查找&#x2F;索引映射</td>\n<td><code>dict</code></td>\n<td>key → value 快速查找</td>\n</tr>\n</tbody></table>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>Python 中的哈希表主要是 <code>dict</code>、<code>defaultdict</code>、<code>set</code>、<code>Counter</code></p>\n<p>核心思想：<strong>key → hash → 索引 → value</strong></p>\n<ul>\n<li><strong>key 必须可哈希</strong>（不可变类型）</li>\n<li><strong>哈希表顺序</strong>：Python 3.7+ 保留插入顺序</li>\n<li><strong>冲突处理</strong>：Python 内部自动解决，一般不需要手动处理</li>\n<li><strong>空间换时间</strong>：哈希表使用额外内存来换取 O(1) 查找速度</li>\n</ul>\n","text":" 本文是借助ChatGPT结合总结的关于哈希相关的知识，以及哈希表的相关定义和使用，帮助理解哈希表的作用以及哈希表的使用场景 Python中的哈希哈希的含义哈希...","permalink":"/post/python哈希","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"python","slug":"python","count":2,"path":"api/categories/python.json"}],"tags":[{"name":"python哈希","slug":"python哈希","count":1,"path":"api/tags/python哈希.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Python%E4%B8%AD%E7%9A%84%E5%93%88%E5%B8%8C\"><span class=\"toc-text\">Python中的哈希</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%93%88%E5%B8%8C%E7%9A%84%E5%90%AB%E4%B9%89\"><span class=\"toc-text\">哈希的含义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%93%88%E5%B8%8C%E8%A1%A8%EF%BC%88Hash-Table%EF%BC%89\"><span class=\"toc-text\">哈希表（Hash Table）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%93%88%E5%B8%8C%E8%A1%A8%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">哈希表基础</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#dict%EF%BC%88%E5%AD%97%E5%85%B8%EF%BC%89\"><span class=\"toc-text\">dict（字典）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#defaultdict%EF%BC%88%E5%B8%A6%E9%BB%98%E8%AE%A4%E5%80%BC%E7%9A%84%E5%AD%97%E5%85%B8%EF%BC%89\"><span class=\"toc-text\">defaultdict（带默认值的字典）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Counter%EF%BC%88%E8%AE%A1%E6%95%B0%E5%99%A8%EF%BC%89\"><span class=\"toc-text\">Counter（计数器）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#set%EF%BC%88%E9%9B%86%E5%90%88%EF%BC%89\"><span class=\"toc-text\">set（集合）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%93%88%E5%B8%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">哈希使用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">注意事项</span></a></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"hot100题-双指针","uid":"740ab7b94515135e4ee54c89990c870e","slug":"hot100题-双指针","date":"2025-08-29T07:38:11.000Z","updated":"2025-09-07T02:22:43.364Z","comments":true,"path":"api/articles/hot100题-双指针.json","keywords":"AI、Python","cover":null,"text":"移动零（283）283. 移动零 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 ①两次单循环，一次用于将数组中...","permalink":"/post/hot100题-双指针","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"hot-100题","slug":"hot-100题","count":5,"path":"api/categories/hot-100题.json"}],"tags":[{"name":"hot100-双指针","slug":"hot100-双指针","count":1,"path":"api/tags/hot100-双指针.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"hot100题-滑动窗口","uid":"c57f5e58e95d302870f92248fd84656d","slug":"hot100题-滑动窗口","date":"2025-08-29T02:23:43.000Z","updated":"2025-09-01T03:23:32.824Z","comments":true,"path":"api/articles/hot100题-滑动窗口.json","keywords":"AI、Python","cover":null,"text":"滑动窗口（定长、不定长、多指针）定长的滑动窗口三步走 入–更新–出 入：下标为 i 的元素进入窗口，更新相关统计量。如果 i<k−1 则重复第一步。 更新：更新...","permalink":"/post/hot100题-滑动窗口","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"hot-100题","slug":"hot-100题","count":5,"path":"api/categories/hot-100题.json"}],"tags":[{"name":"hot100-滑动窗口","slug":"hot100-滑动窗口","count":1,"path":"api/tags/hot100-滑动窗口.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}